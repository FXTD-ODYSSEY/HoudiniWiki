[{"content":"总结 观看笔记 01 - Environment setup http://cgtoolbox.com/houdini-expression-editor/\n  配置 Expression Editor 以及 VScode\n 02 - Help, variables and nodes hou.wd() 获取当前 python 节点位置\nhou.selectedNodes() 获取选中的节点\n  介绍了 Python 的基础操作，以及 Houdini 相关的模块帮助查找。\n 03 - HOM, OBJ loader custom tool https://www.sidefx.com/docs/houdini/hom/hou/ui#selectFile\nhou.ui.selectFile(title=\u0026quot;title\u0026quot;) Houdini 的文件选择窗口\nhou.expandString 可以将 Houdini 的变量 $HIP 扩展成完完整的路径或名称。\n案例分析 选择目录 加载目录下所有的模型文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  # -*- coding: utf-8 -*- from __future__ import division from __future__ import print_function from __future__ import absolute_import import os import hou # NOTE 打开 Houdini 文件选择窗口 | 选择目录 obj_dir = hou.ui.selectFile(title=\u0026#34;Select Obj Directory\u0026#34;,file_type=hou.fileType.Directory) # NOTE 获取的路径可能包含 $HIP houdini 环境变量 | expandString 方便处理 obj_dir_expanded = hou.expandString(obj_dir) # NOTE 遍历目录下的文件 obj_files = os.listdir(obj_dir_expanded) # NOTE 创建 geometry 节点 loader = hou.node(\u0026#39;/obj\u0026#39;).createNode(\u0026#39;geo\u0026#39;,\u0026#39;OBJ_Loader\u0026#39;) # NOTE 创建 merge 节点 merge_objs = loader.createNode(\u0026#34;merge\u0026#34;,\u0026#34;OBJ_Merger\u0026#34;) # NOTE 遍历创建 file 节点 | 修改节点的属性并自动连接到 merge 节点上 for obj in obj_files: obj_file_node = loader.createNode(\u0026#39;file\u0026#39;,obj) obj_file_node.parm(\u0026#39;file\u0026#39;).set(obj_dir + obj) obj_file_node.parm(\u0026#34;missingframe\u0026#34;).set(1) merge_objs.setNextInput(obj_file_node) # NOTE 自动排布节点 loader.layoutChildren() # NOTE 设置显示标记和渲染标记 merge_objs.setDisplayFlag(True) merge_objs.setRenderFlag(True)   ","description":"Mix Training - Python 入门教程","id":0,"section":"4_Python","tags":["Python"],"title":"Bites of Python","uri":"/zh/4_python/b22d93e7/"},{"content":"https://www.sidefx.com/tutorials/intro-to-vex/\n总结   这个教程对于入门 Vex 来说还算不错。\n就是第二集的做法有点拉胯，我自己重新做了一个简洁的版本。\n   rohan 在教程里面也提到他并不是 programer\n所以对于 VEX 的编写不是很专业，不过对于新手入门教学来说足够了。\n 观看笔记 \n  @opinput1_P 可以获取第二个输入的模型信息。\n \n  教程这里使用 modulo 除以 1 取余数得到的值全部是 0 ，所以直接连接 constant 0 的效果也是一样的。(不太懂为啥要用取余数的方法)\n 案例分析 \n  给 zscale 属性加上随机数，然后 poly extrude 节点勾选上 zscale 属性实现随机挤出。\n   相关附件   example_01.hip  (96 kb)    \n  通过 lerp(@P,@opinput1_P,mix_value) 通过 lerp 混合第一个输入和第二个输入的位置。\n为了让顶点位置过渡不混乱，可以加入 sort 节点从上到下排序顶点顺序。\n通过 relbbox 获取 bounding box，使用 bouding box 的信息作为上面的 mix 值即可实现过渡控制。\n   相关附件   example_02.hip  (241 kb)    \n  教程后面的做法尽比较乱，我自己重新做了一遍自己的做法。\n规避了 copy stamp 节点， copy to points 效率更高1\n \n  教程使用 circle 节点通过 sort 节点的 shift 功能\n将圆球 copy 到 0 点的位置，不用关键帧也实现了太阳东升西落的效果。\n但是我觉得 copy to point 有点不太好，所以我用 wrangle 来修改小球的 @P 属性。\n \n  相关附件   example_03.hip  (199 kb)     Houdini Kitchen 教程 12集 讲解 foreach 有提到 链接 \u0026#x21a9;\u0026#xfe0e;\n   ","description":"Rohan Dalvi VEX 入门课程","id":1,"section":"3_Vex","tags":["VEX"],"title":"Rohan Dalvi - INTRO TO VEX","uri":"/zh/3_vex/e2741bbf/"},{"content":"总结 https://www.sidefx.com/docs/houdini/expressions\nhttps://www.sidefx.com/docs/houdini/commands\nhttps://www.sidefx.com/docs/houdini/ref/windows/textport\n  非常古老的教程，但是总结了很多 HScript 的用法，现在也适用。\n教程是速看的，所以没有深入实现其中的案例。\n   根据目前的官方文档的说法，以前还没有接入 Python 的时候使用 HScript 来做一些自动化脚本。\n现在推荐用 Python 来完成这些工作，通道上也支持 Python 脚本作为代码逻辑。\n 观看笔记   bezier() 关键帧也是用 HScript 连接的\n \n  HScript 里面可以使用科学计数法。\n \n  $F 获取当前整数帧数\n$F30 可以自动补齐 30 个零位在前面\n \n  $FF 获取当前浮点数帧数\n \n  trunc 函数可以去除小数点。\npadzero 可以自动补零。\n \n  opinputpath 可以获取当前节点接入端的节点\n \n  Textport 可以查看函数帮助\n \n  Textport 也可以像操作系统一样执行 echo 命令。\n 案例分析 ","description":"Houdini 10 官方 HScript 用法详解","id":2,"section":"19_msic","tags":["HScript"],"title":"Introdution to Attributes, Varaibles and Expressions","uri":"/zh/5aa677ce/"},{"content":"总结   这个教程娓娓道来，蜻蜓点水般介绍了 Houdini 各个主要功能模块。\n虽然教程是 16 年的，但是对于入门来说非常友好，基础操作到 SOP 节点运用可谓是简单易懂。\n特别是 SOP 的讲解上采用 1 集重点介绍一个 节点的方式，讲解不深但胜在清楚。\n后续还比较全面介绍了 Houdini 的 CHOP DOP COP2 这些模块，是入门教程里面相当全面的。\n当然介绍全面的代价就是各个模块部分都是浅尝辄止，如果想从 SOP 更深入地入门，推荐 Rohan 的 Introduction to Houdini\n 教程笔记 基础操作 1 - 20 Houdini 基础操作案例汇总      设置里面可以 配置 自动保存 | 比如时间、保存方式等等\n   视窗设置可以配置轴向以及操作方式\n   视窗上按 D 可以的打开配置窗口，比如调整法线显示的大小。\n   background 可以设置背景的颜色\n   在节点窗口 按 D 可以打开配置窗口配置节点显示。\n   蓝色作用于显示，紫色作用于渲染。按住 Ctrl 点击显示可以单独配置紫色标记。\n   右键菜单可以设置控制轴的朝向。\n   SOP 21 - 39 \n  删除属性可以使用通配符进行匹配 * ^Cd 删除所有属性除了 Cd 属性，P 属性也会保留。\n \n  copy 节点自带 pack 选项，勾选可以节省模型复制的消耗。\n \n  不使用 pack 在复杂的模型下会导致机器卡顿。\n 动画 \u0026amp; CHOP 程序化曲线 40 - 50 \n  CHOP 里的 wave 节点可以通过上面的方式创建三个通道\n \n  $C 可以获取到当前 通道\n \n  生成的曲线可以通过 HScript 设置到外部的通道上\n \n  CHOP 生成多个曲线通道，然后使用 copy stamp 将运动赋予到其他的模型上。\n \n  可以锁住视窗到 CHOP 里面直接调整查看效果。\n通过 CHOP 程序化生成动画曲线，可以批量设置多个复杂的动画。\n \n  相关的曲线也可以通过 channel 节点应用到 SOP 的属性上。\n ROP 渲染 51 - 60   渲染的参数设置和 Arnold5 的配置差不多。\n \n  可以打开看到后台运行的 Mantra 节点\n https://www.sidefx.com/docs/houdini/render/noise\n  教程推荐阅读 Houdini 上述的文档，详细介绍了不同的参数对应渲染噪点的影响。\n \n  这里可以控制 渲染 的 AOV 输出，让 exr 包含其他图层通道。\n \n  使用 OpenGL 节点可以多层次配置输出，输出速度快，和 Viewport 效果相似。\n \n  ROP 也有 geometry 节点用来批量 bake 模型出缓存。\n \n  可以通过 filmbox 节点将场景导出为 FBX ， abc 文件也有同样的节点进行输出。\n \n  默认情况下输出 Mantra 渲染会自动将模型细分。\n 材质 61 - 66   材质设置上和 Maya 相似，节点功能更多更复杂。\n 灯光 67 - 72   Houdini 不同类型的灯光是一体的，可以任意切换，非常方便，使用方式和 Maya 的灯光大差不差。\nHoudini 的灯光参数更多，控制上比 Maya 更方便。\n RBD 破碎 73 - 80 \n\n  可以先用低模来模拟，然后将模拟的结果转换为 points ， 再用 points 去驱动高模。\n \n  使用了本地 cache 的数据，否则有可能会因为 dopimport 节点的聚焦而导致重算，可以将节点聚焦到 Null 上。\n Wire 变形器 81 - 83 Particle 发射器 84 - 90 Pyro 结算器 91 - 95 Pyro 结算器 96 - 98 案例分析 CHOP 动画控制 \n\n  首先通过 alt K 关键帧给环添加旋转运动。\n \n  然后通过 copy transform 将复制的缩放和旋转叠加。\n   最后通过 copy stamp 加 box 的方式复制出多个铁环来运动。\n \n  再 stamp 上获取 CHOP 生成的曲线，通过 $PT 获取多个不同的 CHOP 曲线，连接到 铁环 的 RotateY 上。\n \n  生成随机的 Constant 分段曲线。\n \n  通过 Copy 节点生成 100 条运动曲线。\n \n  添加 Seed 变量根据每一条曲线生成一个随机传入到 wave 节点，实现 100 条曲线的变化都不一样。\n \n  Filter 让曲线更平滑。\n \n  Math 节点限定曲线所处的范围。\n \n  对节点右键可以保存输出缓存文件。\n RBD 破碎 \n\n  需要生成 glue constraint 确保模型破碎之前是紧凑贴合在一起的。\n使用 connect adjacent face 生成约束用到的曲线。\n \n  使用 glue 约束将 broken 的曲线的部分 delete 掉，使约束断开。\n Wire 变形器 \n模型制作思路 \n  制作一个半球，半球通过方块和细分加 ray 投射生成，这样布线比较均匀。\n \n  上面的 UV 生成使用 X 或 Z 轴投射 UV，这样顶点从上到下在 UV 上形成 Y 轴渐变。\n通过 UV 渐变可以可以作为渐变图，利用这个渐变图可以控制 Noise 从上到下的起的作用\n但是我实际测试渐变图的控制效果并不好，于是我采用了 Rohan Dalvi 入门教程 里提到的 relbbox 的方式制作渐变。\n \n  通过手动选取部分的面进行 blast ，可以单独进行挤出操作。\n挤出的时候可以调整 thickness 曲线来控制挤出的厚度。\n曲线生成默认不在原点通过 carve 进行偏移，然后通过 resample 重新生成曲线。\n 变形驱动 \n  使用 WireCapture 获取绑定的权重 wireCapture 属性。\n通过 timeshift 节点确保获取第一帧的位置解算权重，不会导致权重飘忽不定。\n使用 copy attribute 节点将第一帧的数据传递到运动的模型上。\n \n  利用 wiresolver 节点物理结算曲线的运动。\n然后将解算的运动输入到外部的 wire deform 实现曲线带权重驱动模型的效果。\n   相关附件  ### 粒子发射器  ### Pyro 烟雾结算  ### 图片合成 ![alt](https://cdn.jsdelivr.net/gh/FXTD-ODYSSEY/HoudiniWiki@gh-pages/posts/e127bd01/example_06.jpg)  wire.hip  (270 kb)    ","description":"Lynda 入门教程","id":3,"section":"2_beginner","tags":["foundation"],"title":"Lynda - Houdini Essential Training","uri":"/zh/e127bd01/"},{"content":"\n\n  Maya 是一本书 | Houdini 是一个操作系统\n \n  Houdini 的属性类似物体的属性，是依附在物体上的。\n \n  Houdini 是一个工具生成工厂\n ","description":"给 Maya 艺术家的 Houdin 概念","id":5,"section":"2_beginner","tags":["maya"],"title":"Houdini Concepts for the Maya Artist","uri":"/zh/f5e65036/"},{"content":" Houdini 基础操作案例汇总     shelf 工具按住 ctrl 点击可以放置到世界原点上   space + B 可以聚焦切分的 Viewport   Maya 和 Houdini 的控制区别   Houdini 设置原点旋转视窗 和 Maya 默认保持一致   Houdini 用 Y 键可以打开控制轴，视窗上方有相关数据的控制   Houdini 可以将当前节点的设置保存为当前设置   Houdini 会用 Q 键对应 Maya 的 G 键   wireframe 切换   平滑切换   选择界面下按 N 选择所有的几何体面   Houdini 面 切换到 点   Houdini 使用 K 键设置关键帧    Houdini Engine \n\n Houdini 通过 Houdini Engine 将 Hda 功能移植到别的程序上。\n ","description":"Maya 迁移到 Houdini 的全面指引","id":6,"section":"2_beginner","tags":["maya"],"title":"Maya to Houdini Transition Guide","uri":"/zh/0cde720b/"},{"content":"https://www.sidefx.com/learn/getting_started/\n总结   教程通过简单一个足球的案例。\n讲解了 Houdini 主要相关的功能模块的作用\n对于入门了解 Houdini 有帮助\n 观看笔记 \n\n\n\n\n\n案例分析 \n  使用 platonic 节点创建一个基础足球。\n给每一个面添加 patches 属性。\n然后细分模型。\n将模型重新投射到 球 上。\n然后利用细分的属性 patches 可以找到之前的足球低模相关的面。\n   通过 foreach 设置 pieces 属性可以设置遍历面。\n可以将之前低模相关的面逐个获取进行挤出。\n最后再添加细分即可。\n 案例下载   相关附件   soccer.hip  (115 kb)    ","description":"官方入门讲解","id":7,"section":"2_beginner","tags":["foundation"],"title":"The Secret Language of Houdini","uri":"/zh/f7f755c5/"},{"content":"https://www.aboutcg.org/courseDetails/221/introduce\n总结   这个教程对比了 Maya 和 Houdini 的不同差别。\n特别是粒子系统相关和动画相关的讲解，讲得比较清楚。\n 观看笔记 follow path 第 7 P 的视频里面提到 follow path 工具架工具移动了 Constraint 下\nhttps://www.sidefx.com/docs/houdini/shelf/constraintpath.html\n\n路径跟随也和视频里的方式不一样了， Houdini 18 新版本会添加 Constraint 节点网络(CHOP)。\nDOP 缓存限制 \nDOP network 有最大缓存限制，如果 内存 超标了，自动缓存会将旧的缓存清理。\n","description":"ABOUTCG 的免费课程","id":8,"section":"2_beginner","tags":["maya"],"title":"从Maya学Houdini零起点入门极速教学","uri":"/zh/7479ed24/"},{"content":"幻灯片   .reveal-viewport span { z-index: 999; position: absolute; right: 0; margin: 0.3rem; cursor: pointer; color: white; text-shadow: 1px 1px 3px #000000; text-decoration: none; opacity:0; transition: opacity .5s; } .reveal-viewport span:hover { transition: opacity .5s; opacity:1; }   # In the morning ___ ## Getting up - Turn off alarm - Get out of bed ___ ## Breakfast - Eat eggs - Drink coffee --- # In the evening ___ ## Dinner - Eat spaghetti - Drink wine ___ ## Going to sleep - Get in bed - Count sheep         function initSlides() { Reveal.initialize({ controls : false, center: true ,\thistory: false , progress: \"true\" , transition: \"concave\", plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ], }); } toggle = false; function slideFullScreen(){ doc = window.top.document frame = doc.getElementById('slideFrame_1') toggle = !toggle frame.style.cssText = toggle ? \"width: 100vw;position: fixed;top: 0;left: 0;border: 0px;z-index: 999;height: 100vh\" : \"width: 100%;border: 0px;height: 30em;\" doc.body.style.cssText = toggle ? \"overflow:hidden\" : \"overflow:auto\" icon = document.getElementById('icon') icon.innerHTML = toggle ? '' : '' }   document.getElementById('slideContent_1').innerHTML document.getElementById('slideFrame_1').contentWindow.document.write(document.getElementById('slideContent_1').innerHTML); document.getElementById('slideContent_1').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame_1').contentWindow.initSlides() ; }, 1000); });    .reveal-viewport span { z-index: 999; position: absolute; right: 0; margin: 0.3rem; cursor: pointer; color: white; text-shadow: 1px 1px 3px #000000; text-decoration: none; opacity:0; transition: opacity .5s; } .reveal-viewport span:hover { transition: opacity .5s; opacity:1; }   # In the morning ___ ## Getting up - Turn off alarm - Get out of bed ___ ## Breakfast - Eat eggs - Drink coffee --- # In the evening ___ ## Dinner - Eat spaghetti - Drink wine ___ ## Going to sleep - Get in bed - Count sheep         function initSlides() { Reveal.initialize({ controls : false, center: true ,\thistory: false , progress: \"true\" , transition: \"concave\", plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ], }); } toggle = false; function slideFullScreen(){ doc = window.top.document frame = doc.getElementById('slideFrame_2') toggle = !toggle frame.style.cssText = toggle ? \"width: 100vw;position: fixed;top: 0;left: 0;border: 0px;z-index: 999;height: 100vh\" : \"width: 100%;border: 0px;height: 30em;\" doc.body.style.cssText = toggle ? \"overflow:hidden\" : \"overflow:auto\" icon = document.getElementById('icon') icon.innerHTML = toggle ? '' : '' }   document.getElementById('slideContent_2').innerHTML document.getElementById('slideFrame_2').contentWindow.document.write(document.getElementById('slideContent_2').innerHTML); document.getElementById('slideContent_2').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame_2').contentWindow.initSlides() ; }, 1000); });  columns 分栏 Left Content Lorem markdownum insigne\u0026hellip;  Mid Content Lorem markdownum insigne\u0026hellip;  Right Content Lorem markdownum insigne\u0026hellip;   attachmests {{/*\u0026lt;attachmests /\u0026gt;*/}} pannel panel titlethis is a panel text\nasdasfq  ","description":"网站支持的 Hugo ShortCodes 汇总","id":9,"section":"updates","tags":["HoudiniWiki"],"title":"ShortCodes 汇总","uri":"/zh/updates/features/91d7f687/"},{"content":"wavedrom { \u0026quot;signal\u0026quot;: [ {\u0026quot;name\u0026quot;: \u0026quot;CLK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;p.....|...\u0026quot;}, {\u0026quot;name\u0026quot;:\u0026quot;DAT\u0026quot;, \u0026quot;wave\u0026quot;:\u0026quot;x.345x|=.x\u0026quot;, \u0026quot;data\u0026quot;:[\u0026quot;A\u0026quot;,\u0026quot;B\u0026quot;,\u0026quot;C\u0026quot;,\u0026quot;D\u0026quot;]}, {\u0026quot;name\u0026quot;: \u0026quot;REQ\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;0.1..0|1.0\u0026quot;}, {}, {\u0026quot;name\u0026quot;: \u0026quot;ACK\u0026quot;, \u0026quot;wave\u0026quot;: \u0026quot;1.....|01.\u0026quot;} ] } Viz digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026quot;process #1\u0026quot;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026quot;process #2\u0026quot;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } mathjax When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\nkatex $$ \\int_{a}^{b} x^2 dx $$\nJS Sequence Diagram Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow flowchartjs st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e chart { \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;labels\u0026quot;: [\u0026quot;One\u0026quot;, \u0026quot;Two\u0026quot;, \u0026quot;Three\u0026quot;, \u0026quot;Four\u0026quot;, \u0026quot;Five\u0026quot;, \u0026quot;Six\u0026quot;], \u0026quot;datasets\u0026quot;: [{ \u0026quot;label\u0026quot;: \u0026quot;# of Votes\u0026quot;, \u0026quot;data\u0026quot;: [12, 19, 3, 5, 3, 8] }] } } Mermaid graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; ","description":"网站支持的 图表功能 汇总","id":10,"section":"updates","tags":["HoudiniWiki"],"title":"图表功能支持","uri":"/zh/updates/features/9ee9a447/"},{"content":"官方文档\n\n","description":"Houdini 基础操作案例汇总","id":11,"section":"1_learning","tags":["知识汇总"],"title":"Houdini 基础操作案例汇总","uri":"/zh/56c557a6/"},{"content":"https://www.learnsquared.com/courses/houdini-foundations\n总结 观看笔记 案例分析 ","description":"Learn Squared 程序入门教程","id":13,"section":"2_beginner","tags":["foundation"],"title":"Houdini Procedural Foundations","uri":"/zh/246621d8/"},{"content":"总结 观看笔记 VEX \u0026amp; HScript 比较 @P += sin(@Frame/10); sin($F*4) \n  Houdini 的 HScript 和 VEX 都能通过 sin 函数控制缩放\n 04 - Hello world \nprintf(\u0026quot;Hello World\u0026quot;);   VEX 可以像 C 语言一样打印出字符串，默认在 Detail 下值运行一次。\n \nprintf(\u0026quot;Hello World with Point %d\\n\u0026quot;,@ptnum);   如果输入参数并且设置为 Points 模式下运行，则会自动遍历模型的数据。\n \n`points(\u0026quot;../hello\u0026quot;,0,\u0026quot;message\u0026quot;)`   Houdini 如同操作系统，输入文件路径就可以获取相应节点下的数据。\n 05 - Houdini Specifics \n  VOP 节点可 View VEX Code 打开背后生成的 VEX 代码。VOP 是用节点生产 VEX 代码。\n \n  Wrangle 节点有 VEX 代码模板。\n \n\n  在 VEX 代码的函数下停留一小段时间可以按 F1 打开 Houdini 的帮助文档。\n VEX 语法 \nint points = npoints(0); if(points\u0026gt;7){ @cd = rand(@ptnum); } int var = 0; for(int i=0;i\u0026lt;points;i++){ var ++; }   VEX 采用 C 语言的大部分语法规则。\n \nint count = 1; float weight = 1.5; string str = 'A message'; int myArray[] = {1,2,3,4,5}; vector position = {1,3,0}; matrix translation = { {1,1,1,1} , {2,2,2,2} , {3,3,3,3} , {4,4,4,4} }; printf(\u0026quot;Test %d\\n\u0026quot;,translation); int new; // 类型转换 new = (int)weight;   VEX 的变量类型以及变量命名， 命名遵循 C 命名规则，首字符必须为字母，命名变量不包含特殊符号。\nvector 变量可以通过 .r .g .b .a 或者 .x .y .z .w 的方式获取相应的四个值，对应到 matrix 也同理。\n \n  使用 VEX 可以让顶点的 Y轴 大于 零的全部归零。\n 10 - functions point(); // get attribute prim(); vertex(); detial(); setpointattrib(); // set attribute addpoint(); // make a point npoints(); // how many are there setpointgroup(); // put in group \n  常用的 VEX 函数\n 12 - foreach 节点 \n  16.0 以下的节点使用 foreach subnetwork 进行循环操作，到了 16.5+ 的版本就不存在这个节点了，不过实现的效果是一致的。\n 13 - 引用 \n  VEX 的传参修改会改变原来的数值，这点和 Python 不一样。\n \n  VEX 的函数参数间隔使用 ;\n 17 - NearPoints \n@Cd = 0; @Cd = set(0); @Cd = {0}; @Cd = {0,0,0};   设置 Vector 变量有不同的方式可以做到。\n 案例分析 Y轴归零 - 11 \n  使用 VEX 语言的三种操作让 Y轴大于零的 部分归零。\n if(@P.y \u0026gt; 0)@P.y=0; vector pos_all[]; vector pos; // 获取顶点的位置 for (int i = 0; i \u0026lt; npoints(0); i++) { pos = point(0,\u0026quot;P\u0026quot;,i); append(pos_all,pos); } // 设置顶点的位置 foreach(int index;vector posi;pos_all){ if(posi.y\u0026gt;0){ posi.y = 0; setpointattrib(0, \u0026quot;P\u0026quot;, index, posi, \u0026quot;set\u0026quot;); } } int pt_num[] = primpoints(0, @primnum); vector pos; foreach(int pt;pt_num){ pos = point(0,\u0026quot;P\u0026quot;,pt); if(pos.y\u0026gt;0){ pos.y = 0; setpointattrib(0, \u0026quot;P\u0026quot;, pt, pos, \u0026quot;set\u0026quot;); } }    相关附件   example_01.hip  (81 kb)    VEX 构建模型 - 13 \u0026amp; 15 \n  addpoint addprim addvertex 结合这几个命令可以在 Houdini 构建几何体。\naddvertex 的顺序影响 prim 的法线方向。\n \n  通过 for 循环批量创建几何体。\n   相关附件   example_02.hip  (73 kb)    寻找临近的点生成线 - 16 \n  nearpoints 找到每个点临近的顶点序号。\naddprim 给临近的点添加线段。\n   相关附件   example_03.hip  (94 kb)    根据外部模型距离生成颜色值 - 19 \n  利用 pcloud 点云计算模型的距离\n int origin = chi(\u0026quot;source\u0026quot;); float distance = ch(\u0026quot;dist\u0026quot;); int amount = chi(\u0026quot;amount\u0026quot;); int target; vector pos = point(1,\u0026quot;P\u0026quot;,origin); int pcloud = pcopen(0,\u0026quot;P\u0026quot;,pos,distance,amount); if(pcnumfound(pcloud)\u0026gt;0){ while(pciterate(pcloud)){ pcimport(pcloud, \u0026quot;point.number\u0026quot;, target); setpointattrib(0, \u0026quot;Cd\u0026quot;, target, {1,0,0}, \u0026quot;set\u0026quot;); } }    相关附件   example_04.hip  (83 kb)    point cloud 模型偏移 - 20 \n  教程使用 wrangle 遍历 points ，然后每个 @P 获取到 外部顶点的 pcloud\n如果查询得到则计算出距离和方向，然后将方向叠加到顶点的位置上。\n上面的操作会导致顶点位置偏移了很多。\n \n  方向进行 normalize 归一化。\n通过 distance 提取出距离\n将距离作为衰变映射，乘到归一化的方向上。\n \n  相关附件   example_05.hip  (100 kb)    ","description":"VEX 入门课程","id":14,"section":"3_Vex","tags":["VEX"],"title":"Pluralsight - Houdini VEX Fundamentals","uri":"/zh/3_vex/dbcc6763/"},{"content":"https://www.sidefx.com/tutorials/games-quickstart/\n总结   这个教程比较短，简单讲解了 SOP 模块在游戏模型的处理运用。\n 观看笔记 \n  可以修改 C 键的快捷菜单，切换到直接切换到相应的模块。\n \n  可以设置 Bend 的范围，然后进行弯曲。\n \n  使用 Gamers 节点可以自动生成 lod | 自动展 UV | 自动 Bake\n 案例分析 1 - 猪头锁链 \n  通过 draw curve 节点绘制曲线，通过 resample 重采样曲线。\n通过曲线的点复制出锁环，通过 orientation along curve 节点将锁环。\n 2 - 街区挤出 \n  教程通过导入图片生成切分成多块的面片，这里我参考了一个教程的用法，来模拟实现类似效果。 B站\n然后添加一个属性并让这个属性随机，挤出的时候让 distance scale 属性使用新添加的属性即可随机挤出高度。\n 3 - 挤出动画 \n  attribute noise 自带动画属性，勾选上即可看到运动的属性效果。\n 4 - 倒角残垣 \n  这里将 pscale 属性设置成随机值，倒角的时候使用 pscale 进行偏移。\n 案例下载   相关附件   example.hip  (472 kb)    ","description":"游戏相关快速入门","id":15,"section":"2_beginner","tags":["foundation"],"title":"GAMES QUICKSTART","uri":"/zh/169ffaba/"},{"content":"官方文档\n","description":"Python 典型案例汇总","id":16,"section":"1_learning","tags":["知识汇总"],"title":"Houdini Python 典型案例汇总","uri":"/zh/d02d8732/"},{"content":"LearnDay Episode 53: is HScript DEAD?\nhttps://www.youtube.com/watch?v=HGMO23Ik1yc\n用 opname('.') 而不用 $OS\n$OS 作为组名有时候不起作用\nSideFX 不再推荐使用 local variable 所以 $CEX 推荐使用 centroid(0,0)\n","description":"Houdini Tips","id":17,"section":"1_learning","tags":["知识汇总"],"title":"Houdini Tips","uri":"/zh/018aff2a/"},{"content":"总结   这套教程很全面地介绍了 VEX 的使用场景\n最后一集甚至使用 VEX 将论文复杂的数学公式简化为简单的实现，可见其扩展性很强。\n   教程的广度很大，基本上介绍了 VEX 在 Houdini 中的各种调用方式。\n并且也包含了 编程语言基础的讲解，只是教程的知识越来越多，会给人一种越来越难的感觉_(:з」∠)_\n即便是个 VEX 的新手教程，我学习的时候难度还是偏高了。\n不过就 VEX 教程而言，是非常棒的。\n   最后倒数第二个教程 Material VOP 我在 Houdini18 中实现有问题，所以没有进一步提供文件。\n 观看笔记 02 - SOP Wrangle Basics \n  wrangle 节点可以设置为 Number 类型自定义执行的次数。\n 09 - Creating Chladni Patterns 克拉尼图形\n  克拉尼图形 - 声音可视化\n https://thelig.ht/chladni/\ns(x, y) = asin(πnx) sin(πmy) + bsin(πmx)sin(πny)   克拉尼图形 算法\n \n  Houdini16 之后内置 PI 变量，更老的版本需要手动添加 PI\n \n  使用公式写 VEX 代码比用 Vop 节点复现公式代码来得方便。\n 14 - Starting A Function Library   Mortiz 推荐 Joy of Vex 出自 CGwiki 的系列文章教程作为额外的学习材料 链接\n \n  Vex 可以通过 include 将预制的函数引入。\n \n  需要在 Houdini.env 里面引入文件目录。\n 15 - A (Not So) Quick Recap \u0026amp; Fake Hanging Wires \n  Houdini 的 foreach 和 compile 都比 wrangle 节点要慢很多。\n 16 - Pixel Sorting   argsort 可以重新排序数组\n 17 - Intersecting Lines   intersect_all 可以检测模型的碰撞\n 18 - Transformation Matrix Intuition   dient 获取 单位矩阵(identity matrix)\n 20 - Packed Primitives \u0026amp; Primitive Intrinsics \n  可以通过 Show All Intrinsics 查看内置的属性\n 22 - How about a Material Wrangle \n  Material 节点里面使用 snippet 不需要 @\n 案例分析 法线朝向 \n  相关附件   example_01.hip  (235 kb)    噪波面片 \n  相关附件   example_02.hip  (86 kb)    chladni pattern 克拉尼图形 \n\n  相关附件   example_03.hip  (107 kb)    sin cos 变化线圈 \n  sin 结合 cos 可以构成一个圆圈。\n加上 frequency 参数动态变化 sin 和 cos 的参数值就可以得到上面效果的线段。\n再使用 polywire 生成几何体。\n   相关附件   example_04.hip  (86 kb)    临近点线段 \n  这个效果参考 Vex Fundamentals 教程 链接\n \n  相关附件   example_06.hip  (130 kb)    多重切分 \n  相关附件   example_07.hip  (121 kb)    Catenary 算法 \n  相关附件   example_08.hip  (84 kb)    交错线碰撞 \n  wrangle 可以根据组去遍历相关的顶点。\n   相关附件   example_09.hip  (125 kb)    像素偏移 \n  通过 grid 选择 column 可以竖向线段模型\n通过 attribute from map 可以将像素映射到模型上\n虽然模型没有面，只要离得足够远，就可以看到 贴图 的 效果。\n   相关附件   example_10.hip  (134 kb)    VEX 矩阵变换 \n// 创建单位矩阵 matrix trn = ident(); // 旋转 float angle_x = radians(chf(\u0026quot;rotation_x\u0026quot;)); float angle_y = radians(chf(\u0026quot;rotation_y\u0026quot;)); float angle_z = radians(chf(\u0026quot;rotation_z\u0026quot;)); rotate(trn,angle_x,{1,0,0}); rotate(trn,angle_y,{0,1,0}); rotate(trn,angle_z,{0,0,1}); // 缩放 vector scale_vec = chv(\u0026quot;scale\u0026quot;); scale(trn,scale_vec); // 位移 vector translate_vec = chv(\u0026quot;translate\u0026quot;); translate(trn,translate_vec); 4@trn = trn;   构建矩阵进行变换，实现类似 transform 节点的效果。\n最后逐个顶点乘以矩阵实现位置移动。\n   相关附件   example_11.hip  (230 kb)    四元数旋转 \nfloat bias = chf(\u0026quot;bias\u0026quot;); vector axis = point (1,\u0026quot;P\u0026quot;,1); axis = normalize (axis); vector axis2 = point(2,\u0026quot;P\u0026quot;,1); axis2 = normalize (axis2); float angle = chf(\u0026quot;Angle\u0026quot;); angle = radians(angle); float angle2 = chf(\u0026quot;Angle2\u0026quot;); angle2 = radians (angle2); vector4 quat = quaternion (angle,axis); vector4 quat2 = quaternion (angle2,axis2); vector4 rot = slerp(quat,quat2,bias); v@P = qrotate(rot,v@P);   四元数旋转可以避免 Gimbal lock (万向节锁) 讲解链接\n   相关附件   example_12.hip  (92 kb)    copy to points 后矩阵变换 \nmatrix3 trn = ident(); float amp = chf(\u0026quot;amp\u0026quot;); float angle; angle = @P.x * amp; rotate(trn,angle,{1,0,0}); angle = @P.y * amp; rotate(trn,angle,{0,1,0}); angle = @P.z * amp; rotate(trn,angle,{0,0,1}); setprimintrinsic(0, \u0026quot;transform\u0026quot;, @ptnum, trn);   通过 copy to points 勾选上 pack and instance\n可以获取到隐藏的 transform 矩阵\n逐个顶点变换矩阵可以进一步修改模型的 transform\n   相关附件   example_13.hip  (277 kb)    COP 编写 VEX \nhttps://www.sidefx.com/docs/houdini/vex/contexts/cop.html\nfloat freq = .005; vector pos = set(@IX *freq,@IY * freq,@TIME); int seed = 123; float f1,f2 = 0; wnoise(pos,seed,f1,f2); float val = f2 - f1; @R = val; @G = val; @B = val;   在 COP 节点编写 VEX 生成 Noise 图片。\n   相关附件   example_14.hip  (49 kb)    Paper 点云保留镜头可视顶点 算法实现 https://webee.technion.ac.il/~ayellet/Ps/KatzTalBasri.pdf\n\n  利用 Houdini 快速实现 论文的算法。\n这个算法可以将相机望向顶点集背后理应看不见的顶点进行剔除。\n上面截图论文红色的顶点左边有穿插，右边通过算法处理就可以去掉背部顶点的重叠。\n \n  具体原理可以查看 hip 文件\n   相关附件   example_15.hip  (288 kb)    ","description":"Entagma VEX 入门课程","id":18,"section":"3_Vex","tags":["VEX"],"title":"Entagma Patreon - Vex 101","uri":"/zh/3_vex/554149d6/"},{"content":"总结 观看笔记 01 - 界面基础 Houdini 基础操作案例汇总     按 空格 键切换到摄像机控制 在节点窗口下按住 A 键拖拽可以对齐节点 在属性编辑面板按鼠标中间可以按不同数量及调整参数    02 - 数据结构 Houdini \u0026amp; Maya 数据结构差别   Houdini 有 Points Primitives Vertices 数据结构组成\n对应Maya的 Vertex Face FaceVertex 的数据结构\n 构建几何体 Add  Houdini VEX 典型案例汇总  Pluralsight - Houdini VEX Fundamentals    使用 add 构建几何体\n生成面片需要勾选 closed 选项\n// 创建一个面片 vector pos1 = set(0,0,0); vector pos2 = set(1,0,0); vector pos3 = set(1,1,0); int p1 = addpoint(0, pos1); int p2 = addpoint(0, pos2); int p3 = addpoint(0, pos3); int prim1 = addprim(0, \u0026quot;poly\u0026quot;); // 注意添加顺序 addvertex(0, prim1, p1); addvertex(0, prim1, p3); addvertex(0, prim1, p2); 也可以使用 Vex 创建一个三角形的几何体，注意 Wrangle 节点要选择 Detail 模式执行。\n索引自 Pluralsight - Houdini VEX Fundamentals\n  相关附件   geometry.hip  (76 kb)      3 - VOP SOP 变形 \n  这个效果除了 Vop Sop 用 turbulance noise 还可以用 mountain 节点，但是显然没有那么灵活。\n \n  教程里面贴心地介绍了 Turbulance Noise 关于 turbulance 参数的原理\n turbulance 属性每次增加\n就等于多叠加一层\nfrequency * 2\nAmplitude / 2\n的 noise 细节\n  叠加完之后颜色有些差池，但是 pattern 是一致的。\n   Vop 移动模型需要用到 dispalcement 节点\n \n\n  gain 节点可以在 将中间值 在 最大最小值直接进行过度\n \n\n  bias 节点可以在 上下 最大最小值直接进行过度 （最大值最小值是两个平面）\n \n  Ramp Spline 类型可以自由编辑曲线实现起伏高度的完全自定义，实现上面视频调整山峰高度的效果。\n加入 abs 节点让高度 负数变为正数 ， 效果就是山谷变成小山丘。\n通过 twoway 节点控制数值输出。\n \n  这个效果加入 3D Noise 来扭曲 1D Noise\n最后也可以在最后输出 加上一个 Turbulance Noise 调大 turbulance 参数来增加 Noise 细节\n 04 \u0026amp; 05 衰变mask 制作 hypotenuse 斜边\nopposite 对边\nadjacent 邻边\n\n  利用三角函数的特性，点乘时 θ 值小于 90 为正数 | 等于 90 为 0 | 大于 90 为 负数\n \n  attribute from volume 需要通过 scalar ramp 的值设置为 -0.2 和 0 才能看到 falloff。\n \n  这里的 transform 放在 iso 下面就不用每次移动 box 重新计算 iso 体积了。\n 06 \u0026amp; 07 程序化建模 \n  iso 的烟雾看不见可以按 W 打开 wireframe 查看。\n \n  iso 节点使用 sdf volume 如果开启 laser scan 可以加速生成，但是结果会不准。\n \n  volume slice 节点可以看到模型的横切面。\n \n  使用 convert volume 节点可以转换出类似 VDB 模型的效果，同时调整 isovalue 可以非常方便调整模型的大小。\n \n  通过视窗的菜单选择 3D connected Geometry，可以逐个逐个连续模型地选择。\n 案例分析 多面挤压 \n\n  通过 foreach 循环的 meta 节点可以获取遍历的序号，作为随机数的种子。(foreach 效率低)\n显然这个方法没有利用教程提到 Houdini 数据结构，是比较蠢的方法。\n   创建属性属性随机可以用 Vex 更简单来实现。\n f@weight = rand(@primnum); Noise 地形 \n  使用 Noise 制作地形。\n   相关附件   example_02.hip  (127 kb)    衰变 \n\n\n  圆球衰变比较简单，主要通过 distance 根据顶点的距离生成衰变。\n线性衰变通过线段向量和顶点线段 dot 点乘计算衰变， 根据 cos 90 为零 大于 90 为负，小于90为正的特性形成衰变。\n自定义形状衰变则是通过 模型转iso ， 体积转属性实现。\n   相关附件   example_05.hip  (106 kb)    程序化建模 \n\nSolver VDB 木炭增生效果 \n","description":"Entagma AHTYA 入门系列教程","id":19,"section":"2_beginner","tags":["foundation"],"title":"Entagma Patreon - Adding Houdini to your Arsenal","uri":"/zh/ddc0b6e3/"},{"content":"官方文档\nVex 101 Popular Builtin Vex Attribute PDF\n模型渐变方案   使用 BoundingBox - rohan 入门教程 使用 UV - lynda 入门   mask 衰变方案   圆球形 线形 几何体形   ","description":"Houdini VEX 典型案例汇总","id":20,"section":"1_learning","tags":["知识汇总"],"title":"Houdini VEX 典型案例汇总","uri":"/zh/2e9f98d1/"},{"content":"总结 观看笔记 01 - Environment setup   第一集合 Bites of Python 完全一致 链接\n应该是 Python 课程引用了 VEX 课程的介绍。\n 02 - Variables, attributes and Conditional statements   介绍了 VEX 的变量类型和使用。\n int red; float green = 0.5; i@blue = 1; float myrand = rand(@ptnum); vector mycolor = {.5,0,0}; mycolor.r = myrand; v@myvector = set(-1,10,20); @P.y = snoise(@P+@Time)*2; @Cd = mycolor; if(@P.y \u0026lt; 0){ @Cd = set(0,green,0); } else if(@P.y \u0026lt; 1){ @Cd = set(1,0,0); } else { @Cd = set(0,0,1); } \n案例分析 Noise 变化山谷 ","description":"MIX Training - VEX 入门教程","id":21,"section":"3_Vex","tags":["foundation"],"title":"Nature of Vex","uri":"/zh/3_vex/981987a0/"},{"content":"https://www.sidefx.com/learn/collections/houdini-kitchen-for-games/\nHoudini Kitchen for Games\n总结   这个系列的教程也围绕 SOP 系列进行讲解。\n系统讲解了 Houdini 多个模块，也和不少教程有穿插的地方。\n整个系列看起来很行云流水，就是作者的采音设备有待提高。\n   附注:最后一集 L-system 篇章比较复杂，初学了解即可。\n 观看笔记 02 Transform Node \n  右键可以创建 reference copy 的节点，所以的通道都和源节点相连接。\n 04 Introduction to VOPs \n  Vop 节点里面 Pattern 目录可以输出固定的图案的节点。\n 07 Group Nodes \n  通过 Prim Vop 获取面的位置生成中心点。\n 08 All about Houdini Digital Assets \ng`substr(chs(\u0026quot;../../Rook_1\u0026quot;),0,1))`   chs 获取 HDA 上层字符串， substr 对字符串进行裁切，提取字符串第一个字母。\n最后组合输出的 gA 的效果\n 09 Attribute Transfer Node \n  属性传递可以勾选 Match P Attribute 实现吸附效果\n 10 Introduction Volumes and VDBs \n\n  两种计算 Volume 的方式。\n \n  VDB 和 volume 都是一种属性可以在属性面板上看到\n   作者说 90% 的情况都使用 VDB ，因为效果更加可控，效率也更高。\n只有一种情况例外，那就是用 iso 创建 Volume 进行撒点~\n \n  模型转 VDB 再转 模型 可以去除模型内部的面。\n并且可以通过传递法线做模型的 LOD\n \n  VDB 可以将一堆穿插的小球合为一体。\n 12 Copy Stamping and the foreach loops \n  使用 foreach 遍历用 copytopoints 的方式比 copy stamp 要稍微高效一点，sidefx 官方推荐用新的方案。\n教程作者也提到 foreach 的功能更强大。\n https://vimeo.com/142534639\n  教程推荐看上面的 官方教程 深入了解 Houdini 的 foreach 功能\n 13 UV Tools \n  利用 UV auto seam 节点程序化展开切开模型 UV\n再使用 uv flatten 可以自动展开 UV\n再使用 UV Layout 将 UV 空间充分利用好。\n 13 L-system http://algorithmicbotany.org/papers/#abop\nL-system 详解书籍\n  14集详细介绍了 L-system 的很多用法，就是用起来相当复杂。\n https://www.sidefx.com/docs/houdini/nodes/sop/lsystem\n  L-system定义生成器规则可以自动生长出不同的图案，其中需要学习 L-system 的规则定义。\n F 移动一个单位 (生成线段)\nf 移动一个单位\nH 移动半个单位 (生成线段)\nh 移动半个单位\n  更多的规则详见上面的官方文档。\nL-system 不只是创建树木，也可以用来构建雪花等复杂图案。\n 案例拆解 星球散布 \n  Vop 生成 Noise\n在 Noise 的基础上散布\n 植物散布 \n国际象棋 \n植物根茎 \n  L-system 默认生成的树枝倒放，然后将线段投射到地形上。\n 赛车跑道 \n  利用 sweep 节点将曲线上的线段变为赛道。\n Procedural Race Tracks 线上链接\n  上面这个游戏赛道制作的经典教程和这里使用的方案类似。\n 遍历处理效果 \n\nL-system 向日葵 \n","description":"Houdini Kitchen 系列教程","id":22,"section":"2_beginner","tags":["foundation","L-system"],"title":"Houdini Kitchen for Games","uri":"/zh/4c3b6b79/"},{"content":"https://www.sidefx.com/learn/collections/introduction-to-houdini-1/\n总结   这个教程算是挺长的，对于入门来说难度曲线不算太大，讲得也很通俗易懂。\n主要围绕 SOP 进行讲解，实现的案例挺有意思的，适合初学者上手。\n 观看笔记 基础操作 Houdini 基础操作案例汇总      右键可以调整关照效果阴影效果。\n   节点窗口 按 F 或者 G 聚焦选中节点， H 聚焦所有节点\n   L 键可以整理所有的节点，shift+L 整理选中的节点。\n   工具架生成的物体可以按住 Ctrl 可以按米字型吸附。\n https://www.sidefx.com/docs/houdini/basics/select#secure\n  secure selection 关闭状态可以在 控制轴出现的情况选择 Component ，通过 shift + ~ 可以开启和关闭。\n   shift + / 可以在节点窗口打开快速查找节点面板\n   程序化思维 \n  普遍的三维软件节点与节点之间的记录是按照固定序号进行关联的。\n如果增加分段之后，无法继承之前的选面 模式 继续挤出。\n \n  Houdini 通过分组可以更加灵活地进行局部处理。\n \n  group range 节点可以根据一定 pattern 进行灵活打组。\n \n  group expression 可以根据 VEX 表达式判断来打组。\n \n  expand group 可以对现有的分组进行选择扩展。\n \n  group combine 可以将将组外作为与一个新组进行处理。\n Houdini 基础操作案例汇总      使用 $OS 可以直接获取到节点的命名\n   \n  group 可以根据法线的朝向进行选取\n 属性 \u0026amp; 复制 \n  Copy 节点可以勾选创建组给复制对象打组。\nCopy可以通过 $CY $TPT 配置\n \nhttps://www.sidefx.com/docs/houdini/nodes/sop/copy#locals-body\n  copy 节点有内置的变量可以通过 $NCY 变量获取复制的个数\n \n  copy 节点可以去掉 transform 叠加，这样复制每个 copy 不会一直在之前的基础上叠加旋转和位移。\n \n  add 节点可以删除模型的面只保留顶点。\n \n@pscale = float(@ptnum)/80;   sort 节点可以调整节点的序号，对上面复制进行各种不同的效果调整\n   相关附件   02.hip  (86 kb)    \n  @scale 是对全局进行缩放， @pscale 是对单个顶点的缩放进行控制。\n \n  attribute randomize 可以对属性进行随机设置，这样可以操控大小旋转和颜色。\n \n  color 节点可以根据一个属性 设置为 ramp 形式，制作彩虹的效果。\n \n  使用 mask 节点可以根据选择的顶点映射出一个 mask 属性范围。\n Vex \u0026amp; Ramps \n  Vop Node 可以使用 unified noise 节点选择 worley 生成硬切的表面\n \n  使用 relbox 节点可以基于碰撞盒生成 0-1 颜色过渡，使用 vectofloat 将向量分离得到 黑到白 的渐变值。\n \n  这个黑白图可以作为 mask ，使用 mixin 节点对效果进行过滤，实现不同形态的混合。\n \n  也可以结合前面用到的 模型遮罩 更加方便进行过渡动画。\n \n  勾选上 Subdivision Curves 即便弯曲不平滑也可以重新平滑。\n \n  resample 可以导出 curveu 属性来作为遮罩使用。\n Lops   Lops 在案例中进行剖析。\n 案例拆解 模型区域散布 \n  找出法线朝上的面并且撒点线 + 球\n   相关附件   01.hip  (237 kb)    旋转楼梯生成 \n发散装 MG \n方块 数字 \n树林散布 \n变形遮罩 \n躁动挤出 \n顶点替代 \n散布随机 \nLOP 基础渲染 \nLOP 树丛渲染 \nPBR 渲染 \n","description":"Rohan Dalvi - Houdini 18 入门教程","id":23,"section":"2_beginner","tags":["foundation"],"title":"Rohan Dalvi - Introduction to Houdini18","uri":"/zh/dfbf612d/"},{"content":"https://www.sidefx.com/learn/collections/houdini-in-5-minutes/\n总结   Entagma 的教程质量都很高，会从案例的角度出发讲解节点的使用。\n然而这个教程对于初学来说难度有点高，所以我把它放到后面去了。\n另外教程后面推销了一下作者 Moritz 参与的插件 MOPS ， 的确很强。\n 观看笔记 2 - attributes https://www.sidefx.com/docs/houdini/model/attributes.html\n  教程推荐阅读文档学习 Houdini 的属性。\n 4 - render it \n  attribute randomize 有 two way 的方式控制属性随机。\n \n  按 Ctrl + T 可以复制当前窗口\n \n  performance monitor 可以可视化看到节点的消耗，用于优化流程。\n \n  对比了使用 for 循环 color 节点以及 vex 生成随机颜色的性能情况。\nfor 循环是单线程的，所以效率最低。 vex 是性能最好的， production 下建议多采用 vex 。\n 案例分析 小球渲染 \n  使用 isoOffset + scatter 在小球上散布点 通过 attribute randomize 随机大小 和 颜色 (颜色选项选择 Two values 可以在两个值间随机) 然后构建渲染效果     我这里使用 Houdini18 Karma 进行渲染构建。\n   相关附件   example_01.hip  (975 kb)    绘制散布 \u0026amp; 上下运动 \n  使用 attribute paint 节点绘制自定义图案 scatter 使用自定义属性进行撒点 然后使用上面小球渲染的思路进行散布   \n  使用 Normal 添加朝上的法线 使用 point vop 叠加一层 noise 来运动点     教程一开始演示在模型上使用 Mountain 节点，然后再撒点，这样效率会很低，直接用 Vex 实现顶点运动会更高效。\n   相关附件   example_02.hip  (475 kb)    多重挤出 \n  添加随机 0 或 1 的 active 面属性 添加随机 zscale 面属性 extrude 选择 @active==1 进行挤出，并且 zscale 属性要开启 添加 foreach feedback 节点来继承之前的循环结果 使用 meta 节点给 randomize 节点的 seed 关联     相关附件   example_04.hip  (119 kb)    秸枝增生 \n\n  solver 节点不断对上一帧的结果进行撒点生成小球，随机状态下会逐渐在特定区域不断叠加小球 然后将生成的小球转成 VDB 平滑再从 VDB 转为模型。     相关附件   example_05.hip  (108 kb)    复杂旋转 \n  遍历模型所有的面，利用 transfrom node 进行旋转。 添加一个 Null 节点作为控制器，添加滑竿俩控制旋转。   detail(\u0026quot;../foreach_begin1_metadata1/\u0026quot;,\u0026quot;iteration\u0026quot;,0) * ch(\u0026quot;../controller/weight\u0026quot;)    相关附件   example_06.hip  (240 kb)    粒子发射 \nvellum 沙粒 \nMOPs 图像变换 \n等高线山峰 \n","description":"Entagma 5 分钟入门教学","id":24,"section":"2_beginner","tags":["foundation"],"title":"Houdini in 5 Minutes","uri":"/zh/3a4c10b0/"},{"content":"  本网站基于 Hexo 静态网站生成工具构建，借助这个平台整理归纳 Houdini 的知识。\n本博客完全开源，欢迎大家参与贡献分享自己关于 Houdini 的经验总结 链接\n   文章建议以 markdown 投稿~\n网站特性里面展示了，网站支持的一些内容构建，可以点击右上角的编辑按钮在 Github 上查看文章的 Markdown 源码。\n ","description":"建站初衷","id":25,"section":"updates","tags":null,"title":"关于网站","uri":"/zh/updates/about/"},{"content":"2021-02-13   Houdini in 5 Minutes - 案例分析 Lynda - Houdini Essential Training - 案例分析 Rohan Dalvi - Introduction to Houdini18 - 案例分析 Entagma Patreon- Adding Houdini to your Arsenal  - 观看笔记 \u0026amp; 案例分析   ","description":"教程完成进度","id":26,"section":"updates","tags":null,"title":"待办列表","uri":"/zh/updates/todo/"},{"content":"2021-02-14   tooltip 添加 description   2021-02-12   优化 url 菜单添加 sections 跳转   2021-01-26   修复 tooltip 文字显示问题 修复多标签生成多个 \u0026lt;/div\u0026gt; 的 BUG   2021-01-25   使用相对路径 支持 Github Pages 访问   2021-01-24   查 复制不起作用 BUG 封面在 tooltip 以及 list.html 罗列 文章添加封面 修正 搜索 json 图片未上传自动用 本地路径 relink 支持 slug 路径 relink 支持多个 url attachments cdn 加速 baseUrl 强制跳转   2021-01-23   制作一个卡片页面显示 pan 链接 修复 anchor 定位被覆盖问题 完善默认 _index.md 罗列 修复幻灯片全屏显示功能 编辑按钮指向   2021-01-22   添加翻译模块 文章显示 video 和 pan 信息 做一个时间轴页面   2021-01-21   CI 支持 跑 python 脚本生成 links.json 数据 完善 默认 _index 内容 | 决定采用中文输出内容 完善 优化 reveal.js 全屏提示 SEO 支持 顶部下来菜单支持 支持 Vex 代码高亮 视频图片同时支持 破坏 markdown | 自动切换 cdn 路径 toc 过滤   2021-01-20   完善标题搜索 支持 zzo \u0026amp; docport 部分 shortcode 完美支持 zzo 各种图表库   2021-01-19   添加 Github CI 自动部署到 hou.l0v0.com   2021-01-18   通过 Python 脚本收集 relink shortcode 实现链接节点数据收集 调整 Template 加入关联页面   2021-01-17   修改 capslock+ 工具 支持 JavaScript 输出 uuid 通过 js 输出支持 Golang 的日期 导航添加 tooltip   2021-01-13   更新 Nodes 节点分类   ","description":"记录网站更新","id":27,"section":"updates","tags":null,"title":"更新日志","uri":"/zh/updates/log/"},{"content":"https://www.sidefx.com/docs/houdini/nodes/sop/add.html\n","description":"Creates Points or Polygons, or adds points/polys to an input.","id":28,"section":"20_nodes","tags":null,"title":"Add","uri":"/zh/dd4f50e5/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nVex vector pos; vector pos_all[]; for(int i = 0; i\u0026lt;npoints(0);i++) { pos = point(0, \u0026quot;P\u0026quot;, i); //将获取到点位置信息存放到数组中 append(pos_all,pos); } //遍历数组 获取数组中的信息 for(int y = 0; y\u0026lt;len(pos_all);y++) { printf(\u0026quot;%d\\n\u0026quot;,pos_all[y]); } // foreach (int index; element_type value; array) foreach (int index; vector posi; pos_all){ //posi是当前index遍历中pos_all数组的一个元素 if(posi.y \u0026gt; 0 ) { posi.y = 0; setpointattrib(0, \u0026quot;P\u0026quot;, index, posi, \u0026quot;set\u0026quot;);//进行位移操作 } } // 创建一个面片 vector pos1 = set(1,0,1); vector pos2 = set(-1,0,-1); vector pos3 = set(-1,0,1); vector pos4 = set(1,0,-1); int p1 = addpoint(0, pos1); int p2 = addpoint(0, pos2); int p3 = addpoint(0, pos3); int p4 = addpoint(0, pos4); int prim1 = addprim(0, \u0026quot;poly\u0026quot;); // 注意添加顺序 addvertex(0, prim1, p1); addvertex(0, prim1, p3); addvertex(0, prim1, p2); addvertex(0, prim1, p4); Diff 1 2 3 4 5 6 7 8 9 10  *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line   Makefile 1 2 3 4 5  CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I.   JSON 1 2 3  {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]}   Markdown 1 2 3  **bold** *italics* [link](www.example.com)   JavaScript 1  document.write(\u0026#39;Hello, world!\u0026#39;);   CSS 1 2 3  body { background-color: red; }   Objective C 1 2 3 4 5 6  #import \u0026lt;stdio.h\u0026gt;  int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); }   Python 1  print \u0026#34;Hello, world!\u0026#34;   XML 1 2 3 4 5  \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt;   Perl 1  print \u0026#34;Hello, World!\\n\u0026#34;;   Bash 1  echo \u0026#34;Hello World\u0026#34;   PHP 1  \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  CoffeeScript 1  console.log(“Hello world!”);   C# 1 2 3 4 5 6 7 8  using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } }   C++ 1 2 3 4 5 6 7  #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; }   SQL 1 2  SELECT column_name,column_name FROM table_name;   Go 1 2 3 4 5  package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) }   Ruby 1  puts \u0026#34;Hello, world!\u0026#34;   Java 1 2 3 4 5 6 7 8 9 10 11 12  import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame  frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame  frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame  frame.pack(); //Setting size to smallest  frame.setLocationRelativeTo(null); //Centering frame  frame.setVisible(true); //Showing frame  } }   Latex Equation 1  \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x).   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp  if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; }   ","description":"Syntax highlighting test","id":29,"section":"updates","tags":["HoudiniWiki"],"title":"Syntax highlighting","uri":"/zh/updates/features/1ffcb410/"},{"content":"https://www.sidefx.com/docs/houdini/nodes/sop/attribcopy.html\n","description":"Copies attributes between groups of vertices, points, or primitives.","id":30,"section":"20_nodes","tags":null,"title":"Attribute Copy","uri":"/zh/37b24259/"}]